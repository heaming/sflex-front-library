// since there is no area for function. function defined in this place. plz fixme.
@function at($list, $idx) {
  @if type-of($list) != "list" {
    @return $list;
  }

  @if length($list) == 1 {
    @return nth($list, 1);
  }

  @if length($list) < $idx {
    $remain-idx: $idx % length($list);

    @if $remain-idx == 0 {
      @return nth($list, length($list));
    } @else {
      @return nth($list, $remain-idx);
    }
  }

  @return nth($list, $idx);
}

@function zero-unit($number, $unit: "px") {
  @if $number == 0 {
    @return $number + $unit;
  }

  @return $number;
}

@mixin typo($type, $font-weight: null) {
  $-typed: map-get($font-types, $type);

  @if $-typed {
    font-size: map-get($-typed, "size");
    line-height: map-get($-typed, "line-height");
    letter-spacing: map-get($-typed, "letter-spacing");

    @if $font-weight {
      font-weight: $font-weight;
    } @else {
      font-weight: map-get($-typed, "weight");
    }
  }
}

@mixin typo-of-size($font-size, $font-weight: null) {
  $-px-map: (
    22px: "title",
    18px: "subtitle",
    16px: "body",
    14px: "dense",
    12px: "caption",
  );
  $-type: map-get($-px-map, $font-size);

  @include typo($-type, $font-weight);
}

@mixin kw-item($min-height) {
  display: flex;
  min-height: $min-height;

  &__label {
    flex: none;
    align-self: start;
    width: 150px;
    min-height: $min-height;
    padding-right: 16px;
    display: flex;
    align-items: center;

    &--required {
      .kw-label-content__label::after {
        content: "*";
        display: contents;
        color: $accent;
      }
    }
  }

  &__field {
    align-self: center;
    flex: 1 0 1%;
    display: flex;
    align-items: center;

    // 직계 자손이 없는 field 의 경우 inline-block 으로 처리.
    // 물론 없어도 동작하지만, text-align inherit 를 쓸 수 있는 구석은 마련해 놓는 것이 더 좋은 구조다.
    &:not(:has(> *)) {
      display: inline-block;
    }

    .kw-field {
      flex: 1 1 0;
      max-width: 100%;

      & + span {
        color: $black3;
        padding: 0 4px;
        font-size: 14px;

        &:last-child {
          padding-right: 0;
        }
      }

      & + .kw-field,
      & + .kw-field-wrap,
      & + .kw-btn {
        margin-left: 8px;
      }
    }

    .kw-field-wrap {
      flex: 1 1 0;
      max-width: 100%;

      & + .kw-field,
      & + .kw-field-wrap,
      & + .kw-btn {
        margin-left: 8px;
      }
    }

    &--align-left {
      justify-content: flex-start;

      &:not(:has(> *)) {
        text-align: left;
      }
    }

    &--align-right {
      justify-content: flex-end;

      &:not(:has(> *)) {
        text-align: right;
      }
    }

    &--align-center {
      justify-content: center;

      &:not(:has(> *)) {
        text-align: center;
      }
    }
  }
}

@mixin kw-row($row-height , $gap, $padding) {
  display: flex;
  margin: 0;
  padding: $padding;
  min-height: #{$row-height + at($padding, 1) + at($padding, 3)};
  gap: $gap;
  align-items: start;

  .kw-form-item {
    flex: none;
  }

  &:first-of-type:not(h3+.kw-form-row) {
    padding-top: 0;
    min-height: $kw-field-line-height + at($padding, 3);
  }

  &:last-of-type {
    padding-bottom: 0;
    min-height: $kw-field-line-height + at($padding, 1);
  }

  &:first-of-type:last-of-type {
    padding-top: 0;
    padding-bottom: 0;
    min-height: $kw-field-line-height;
  }

  @for $i from 1 through 12 {
    .kw-form-item:first-child:nth-last-of-type(#{$i}),
    .kw-form-item:first-child:nth-last-of-type(#{$i}) ~ .kw-form-item {
      width: calc((100% - (#{$gap} * (#{$i} - 1))) / #{$i});
    }
  }

  @for $cols from 1 through 12 {
    &--cols-#{$cols} {
      .kw-form-item {
        width: calc((100% - (#{$gap} * (#{$cols} - 1))) / #{$cols}) !important;

        @for $colspan from 1 through 12 {
          &--colspan-#{$colspan} {
            width: calc((100% - (#{$gap} * (#{$cols} - 1))) / #{$cols} * #{$colspan} + #{$gap} * #{$colspan - 1}) !important;
          }
        }
      }
    }
  }
}

@mixin kw-btn-height-modifier($padding, $line-height, $font-size, $font-weight, $letter-spacing: normal, $border-radius: null) {
  $-min-height: calc(#{$line-height} + #{ zero-unit(at($padding, 1) + at($padding, 3))});

  font-size: $font-size;
  line-height: $line-height;
  padding: $padding;
  font-weight: $font-weight;
  letter-spacing: $letter-spacing;
  min-height: $-min-height;

  &.kw-btn--round {
    min-width: $-min-height;
    border-radius: 50%;
  }

  &.kw-btn--rounded {
    @if $border-radius {
      border-radius: $border-radius;
    } @else {
      border-radius: max(#{at($padding, 4)}, #{at($padding, 1)}) max(#{at($padding, 1)}, #{at($padding, 2)}) max(#{at($padding, 2)}, #{at($padding, 3)}) max(#{at($padding, 3)}, #{at($padding, 4)});
    }
  }
}

@mixin kw-btn-height-modifier-by-font-type($min-height, $font-type, $side-padding: 12px) {
  $-font-type: map-get($font-types, $font-type);
  $-line-height: map-get($-font-type, "line-height");
  $-font-size: map-get($-font-type, "size");
  $-font-weight: map-get($-font-type, "font-weigth");
  $-letter-spacing: map-get($-font-type, "letter-spacing");
  $-padding: calc((#{$min-height} - #{$-line-height}) / 2) $side-padding;

  @include kw-btn-height-modifier($-padding, $-line-height, $-font-size, $-font-weight, $-letter-spacing);
}

// If, you don't want common hover, active effect. use this.
@mixin kw-btn-custom-color-action($name, $color, $hover-color, $action-color) {
  .kw-btn--filled,
  .kw-btn--outlined {
    &.kw-btn--color-#{$name} {
      background-color: $color;
    }

    @at-root body.desktop {
      .kw-btn.kw-btn--color-#{$name} {
        &.q-focusable:focus,
        &.q-manual-focusable--focused,
        &.q-hoverable:hover {
          background-color: $hover-color;

          &::before {
            background-color: #fff;
          }
        }

        &.q-btn.q-btn--active {
          background-color: $action-color;

          &::before {
            background-color: #fff;
          }
        }
      }
    }
  }
}

@mixin color-based($prefix, $color-map) {
  @each $name, $color in $color-map {
    $class-name: $prefix + $name;
    #{$class-name} {
      @content($color);
    }
  }
}

@mixin color-based-with-name($prefix, $color-map) {
  @each $name, $color in $color-map {
    $class-name: $prefix + $name;
    #{$class-name} {
      @content($color, $name);
    }
  }
}

@mixin native-scrollbar($overflow: overlay, $scrollbar-gutter: stable, $is-mobile: null, $visible: null) {
  $-scrollbar-width: $kw-scrollbar-width;
  $-scrollbar-height: $kw-scrollbar-height;
  $-scrollbar-track-background-color: $kw-scrollbar-track-background-color;
  $-scrollbar-track-background-color-hover: $kw-scrollbar-track-background-color-hover;
  $-scrollbar-track-background-color-active: $kw-scrollbar-track-background-color-active;
  $-scrollbar-thumb-background-color: $kw-scrollbar-thumb-background-color;
  $-scrollbar-thumb-background-color-hover: $kw-scrollbar-thumb-background-color-hover;
  $-scrollbar-thumb-background-color-active: $kw-scrollbar-thumb-background-color-active;
  $-scrollbar-thumb-border: $kw-scrollbar-thumb-border;
  $-scrollbar-thumb-border-hover: $kw-scrollbar-thumb-border-hover;
  $-scrollbar-thumb-border-active: $kw-scrollbar-thumb-border-active;

  @if $visible {
    $-scrollbar-track-background-color: $kw-scrollbar-track-background-color-hover;
    $-scrollbar-thumb-background-color: $kw-scrollbar-thumb-background-color-hover;
  }

  @if $is-mobile {
    $-scrollbar-width: $kw-scrollbar-width-mobile;
    $-scrollbar-height: $kw-scrollbar-height-mobile;
    $-scrollbar-track-background-color: $kw-scrollbar-track-background-color-mobile;
    $-scrollbar-track-background-color-hover: $kw-scrollbar-track-background-color-hover-mobile;
    $-scrollbar-thumb-background-color: $kw-scrollbar-thumb-background-color-mobile;
    $-scrollbar-thumb-background-color-hover: $kw-scrollbar-thumb-background-color-hover-mobile;
    $-scrollbar-thumb-border: $kw-scrollbar-thumb-border-mobile;
    $-scrollbar-thumb-border-hover: $kw-scrollbar-thumb-border-hover-mobile;
    $-scrollbar-thumb-border-active: $kw-scrollbar-thumb-border-active-mobile;

    @if $visible {
      $-scrollbar-track-background-color: $kw-scrollbar-track-background-color-hover-mobile;
      $-scrollbar-thumb-background-color: $kw-scrollbar-thumb-background-color-hover-mobile;
    }
  }

  // noinspection CssInvalidPropertyValue
  overflow: $overflow;
  -webkit-overflow-scrolling: touch; /* Lets it scroll lazy */
  scrollbar-gutter: $scrollbar-gutter;

  &::-webkit-scrollbar {
    width: $-scrollbar-width;
    height: $-scrollbar-height;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $-scrollbar-thumb-background-color;
    background-clip: content-box;
    border: $-scrollbar-thumb-border;
    transition: background-color 0.3s;

    &:vertical {
      border-radius: calc(#{$-scrollbar-width} / 2);
    }

    &:horizontal {
      border-radius: calc(#{$-scrollbar-height} / 2);
    }

    &:hover {
      border: $-scrollbar-thumb-border-active !important;
      background-color: $-scrollbar-thumb-background-color-active;
    }
  }

  &::-webkit-scrollbar-track {
    background-color: $-scrollbar-track-background-color;
    transition: background 0.3s;

    &:hover {
      background-color: $-scrollbar-track-background-color-hover;
    }
  }

  &::-webkit-scrollbar-corner {
    background-color: $-scrollbar-track-background-color;

    &:hover {
      background-color: $-scrollbar-track-background-color-hover;
    }
  }

  &.kw-scrollbar--scroll,
  &:hover {
    &::-webkit-scrollbar-thumb {
      border: $-scrollbar-thumb-border-hover;
      background-color: $-scrollbar-thumb-background-color-hover;
    }

    &::-webkit-scrollbar-track {
      border: $-scrollbar-thumb-border-hover;
      background-color: $-scrollbar-track-background-color-hover;
    }

    &::-webkit-scrollbar-corner {
      border: $-scrollbar-thumb-border-hover;
      background-color: $-scrollbar-track-background-color-hover;
    }
  }
}
