.kw-option-group {
  .q-option-group {
    margin-right: 0;
    margin-left: 0;
    height: auto;
    display: flex;
    flex-wrap: wrap;
    align-items: center;

    & > div:not(:last-child) {
      margin-right: 20px;
      margin-left: 0;
    }
  }

  // checkbox
  $-kw-checkbox-icon-size: 22px; // maybe calc(#{$kw-field-line-height} - 2px)
  $-kw-checkbox-icon-size-dense: 18px;
  $-kw-checkbox-label-font-size: $kw-field-font-size;
  $-kw-checkbox-label-font-size-dense: $kw-field-font-size-dense;
  $-kw-checkbox-line-height: $kw-field-line-height;
  $-kw-checkbox-line-height-dense: $kw-field-line-height-dense;

  .q-checkbox {
    .q-checkbox__bg { /* does not appear when using icon */
      inset: 1px;
      width: $-kw-checkbox-icon-size;
      height: $-kw-checkbox-icon-size;
      border: none;
      border-radius: 0;
      background: url(~@assets/images/checkbox_off.svg) no-repeat center;
      background-size: $-kw-checkbox-icon-size;
    }

    .q-checkbox__icon {
      font-size: 1em;
    }

    .q-checkbox__svg {
      display: none;
    }

    .q-checkbox__truthy { /* does not appear */
    }

    .q-checkbox__indet { /* does not appear */
    }

    .q-checkbox__inner {
      font-size: $-kw-checkbox-icon-size;
      width: $-kw-checkbox-line-height;
      min-width: $-kw-checkbox-line-height;
      height: $-kw-checkbox-line-height;

      &--truthy,
      &--indet {
        use {
          /*
          If you want use custom icon, you should override this. or use fixed color in your icon svg.

          only appear when using svg-use way what we use.
          notify, there is <use> does not rendered in main dom,
          so, if you want styling them, only you can use inherit properties.
          like, currentColor, or inherit.
          ref) https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/
         */
          stroke: $primary; // border color
          fill: $primary; // background color
          color: $bg-white; // inner content color, like check path.
        }

        .q-checkbox__bg {
          background: url(~@assets/images/checkbox_on.svg) no-repeat center;
          background-size: $-kw-checkbox-icon-size;
        }
      }

      &--falsy {
        use {
          stroke: $line-stroke; // border color
          fill: $bg-white; // background color
        }
      }
    }

    .q-checkbox__label {
      margin-left: 8px;
      font-size: $-kw-checkbox-label-font-size;
      line-height: $-kw-checkbox-line-height;
      font-weight: 500;
      color: $black1;
    }

    &.disabled {
      opacity: unset !important;

      .q-checkbox__label {
        color: $placeholder;
      }

      .q-checkbox__bg {
        background: url(~@assets/images/checkbox_disable.svg) no-repeat center;
        background-size: $-kw-checkbox-icon-size;
      }

      .q-checkbox__inner--truthy .q-checkbox__bg {
        background: url(~@assets/images/checkbox_selected_disable.svg) no-repeat center;
        background-size: 22px;
      }

      .q-checkbox__inner {
        font-size: $-kw-checkbox-icon-size;

        &--truthy,
        &--indet,
        &--falsy {
          use {
            /*
            only appear when using svg-use way what we use.
            notify, there is <use> does not rendered in main dom,
            so, if you want styling them, only you can use inherit properties.
            like, currentColor, or inherit.
            ref) https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/
           */
            stroke: $line-stroke; // border color
            fill: $line-bg; // background color
            color: $line-stroke; // inner content color, like check path.
          }
        }
      }
    }

    .q-checkbox__label {
      font-size: $kw-field-font-size;
      line-height: $kw-field-line-height;
      margin-left: 8px;
    }

    &--dense {
      .q-checkbox__inner {
        font-size: $-kw-checkbox-icon-size-dense;
        width: $-kw-checkbox-line-height-dense;
        min-width: $-kw-checkbox-line-height-dense;
        height: $-kw-checkbox-line-height-dense;

        &--truthy,
        &--indet {
          .q-checkbox__bg {
            background: url(~@assets/images/checkbox_on.svg) no-repeat center;
            background-size: $-kw-checkbox-line-height-dense;
          }
        }
      }

      .q-checkbox__bg {
        inset: 1px;
        width: $-kw-checkbox-icon-size-dense;
        height: $-kw-checkbox-icon-size-dense;
        border: none;
        border-radius: 0;
        background: url(~@assets/images/checkbox_off.svg) no-repeat center;
        background-size: $-kw-checkbox-icon-size-dense;
      }

      .q-checkbox__label {
        font-size: $-kw-checkbox-label-font-size-dense;
        line-height: $-kw-checkbox-line-height-dense;
        padding-left: 4px;
      }

      &.reverse .q-checkbox__label {
        padding-left: 0;
        padding-right: 4px;
      }
    }
  }

  // radio
  $-kw-radio-icon-size: 22px; // maybe calc(#{$kw-field-line-height} - 2px)
  $-kw-radio-icon-size-dense: 18px;
  $-kw-radio-label-font-size: $kw-field-font-size;
  $-kw-radio-label-font-size-dense: $kw-field-font-size-dense;
  $-kw-radio-line-height: $kw-field-line-height;
  $-kw-radio-line-height-dense: $kw-field-line-height-dense;

  .q-radio {
    .q-radio__bg { /* does not appear when using icon */
      inset: 1px;
      width: $-kw-radio-icon-size;
      height: $-kw-radio-icon-size;
      border: none;
      border-radius: 0;
      background: url(~@assets/images/radio_off.svg) no-repeat center;
      background-size: $-kw-radio-icon-size;

      > path {
        display: none;
      }
    }

    .q-radio__icon {
      font-size: 1em;
    }

    .q-radio__svg {
      display: none;
    }

    .q-radio__check { /* does not appear */
    }

    .q-radio__inner {
      font-size: $-kw-radio-icon-size;
      width: $-kw-radio-line-height;
      min-width: $-kw-radio-line-height;
      height: $-kw-radio-line-height;

      &--truthy {
        use {
          /*
          If you want use custom icon, you should override this. or use fixed color in your icon svg.

          only appear when using svg-use way what we use.
          notify, there is <use> does not rendered in main dom,
          so, if you want styling them, only you can use inherit properties.
          like, currentColor, or inherit.
          ref) https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/
         */
          stroke: $primary; // border color
          fill: $primary; // background color
          color: $bg-white; // inner content color, like check path.
        }

        .q-radio__bg {
          background: url(~@assets/images/radio_on.svg) no-repeat center;
          background-size: $-kw-radio-icon-size;
        }
      }

      &--falsy {
        use {
          stroke: $line-stroke; // border color
          fill: $bg-white; // background color
        }
      }
    }

    .q-radio__label {
      padding-left: 8px;
      font-size: $-kw-radio-label-font-size;
      line-height: $-kw-radio-line-height;
      font-weight: 500;
      color: $black1;
    }

    &.reverse .q-radio__label {
      padding-left: 0;
      padding-right: 8px;
    }

    &.disabled {
      opacity: unset !important;

      .q-radio__label {
        color: $placeholder;
      }

      .q-radio__bg {
        background: url(~@assets/images/radio_disable.svg) no-repeat center;
        background-size: $-kw-radio-icon-size;
      }

      .q-radio__inner--truthy .q-radio__bg {
        background: url(~@assets/images/radio_selected_disable.svg) no-repeat center;
        background-size: 22px;
      }

      .q-radio__inner {
        font-size: $-kw-radio-icon-size;

        &--truthy,
        &--falsy {
          use {
            /*
            only appear when using svg-use way what we use.
            notify, there is <use> does not rendered in main dom,
            so, if you want styling them, only you can use inherit properties.
            like, currentColor, or inherit.
            ref) https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/
           */
            stroke: $line-stroke; // border color
            fill: $line-bg; // background color
            color: $line-stroke; // inner content color, like check path.
          }
        }
      }
    }

    &--dense {
      .q-radio__inner {
        font-size: $-kw-radio-icon-size-dense;
        width: $-kw-radio-line-height-dense;
        min-width: $-kw-radio-line-height-dense;
        height: $-kw-radio-line-height-dense;

        &--truthy {
          .q-radio__bg {
            background-size: $-kw-radio-icon-size-dense;
          }
        }
      }

      .q-radio__bg {
        inset: 1px;
        width: $-kw-radio-icon-size-dense;
        height: $-kw-radio-icon-size-dense;
        border: none;
        border-radius: 0;
        background-size: $-kw-radio-icon-size-dense;
      }

      .q-radio__label {
        font-size: $-kw-radio-label-font-size-dense;
        line-height: $-kw-radio-line-height-dense;
        padding-left: 4px;
      }

      &.reverse .q-radio__label {
        padding-left: 0;
        padding-right: 4px;
      }
    }
  }

  // toggle
  $-kw-toggle-height: $kw-field-line-height;
  $-kw-toggle-track-height: 17px; // $-kw-toggle-height * 0.7?
  $-kw-toggle-track-width: 30px; // $-kw-toggle-height * 1.2?
  $-kw-toggle-thumb-size: 15px;
  $-kw-toggle-thumb-padding: ($-kw-toggle-track-height - $-kw-toggle-thumb-size) / 2;
  $-kw-toggle-thumb-color: $bg-white;
  $-kw-toggle-thumb-slide-length: $-kw-toggle-track-width - $-kw-toggle-track-height;
  $-kw-toggle-label-color: $black3;
  $-kw-toggle-label-font-size: $kw-field-font-size-dense;
  $-kw-toggle-label-line-height: $kw-field-line-height-dense;

  .q-toggle {
    .q-toggle__track {
      height: 100%;
      border-radius: $-kw-toggle-track-height / 2;
      opacity: 1;
      background: currentcolor;
    }

    .q-toggle__thumb {
      top: $-kw-toggle-thumb-padding;
      left: $-kw-toggle-thumb-padding;
      width: $-kw-toggle-thumb-size;
      height: $-kw-toggle-thumb-size;

      &::after {
        background: $-kw-toggle-thumb-color;
        box-shadow: none;
      }

      .q-icon {
        font-size: 1em;
        opacity: 1;
      }
    }

    .q-toggle__inner {
      margin: auto;
      font-size: $-kw-toggle-thumb-size; // when use icon
      padding: 0;
      width: $-kw-toggle-track-width;
      height: $-kw-toggle-track-height;
      min-width: auto;
      min-height: auto;

      &--indet {
        .q-toggle__thumb {
          left: $-kw-toggle-thumb-padding + ($-kw-toggle-thumb-slide-length / 2);
        }
      }

      &--truthy {
        color: $primary;

        .q-toggle__track {
          opacity: 1;
        }

        .q-toggle__thumb {
          left: $-kw-toggle-thumb-padding + $-kw-toggle-thumb-slide-length;
        }
      }

      &--falsy {
        color: $line-line;
      }
    }

    &.disabled {
      opacity: 1 !important;

      .q-toggle__inner {
        &--truthy {
          color: $line-stroke; // does not defined!
        }

        &--falsy {
          color: $line-stroke; // does not defined!
        }
      }

      .q-toggle__thumb::after {
        background: $line-bg;
      }
    }

    .q-toggle__label {
      padding-left: 4px;
      font-size: $-kw-toggle-label-font-size;
      line-height: $-kw-toggle-label-line-height;
      color: $-kw-toggle-label-color;
      font-weight: 500;
    }

    &.reverse {
      .q-toggle__label {
        padding-left: 0;
        padding-right: 4px;
      }
    }

    &--dense {
      $-kw-toggle-height-dense: $kw-field-line-height-dense;
      $-kw-toggle-track-height-dense: 14px; // $-kw-toggle-height * 0.7?
      $-kw-toggle-track-width-dense: 24px; // $-kw-toggle-height * 1.2?
      $-kw-toggle-thumb-size-dense: 12px;
      $-kw-toggle-thumb-padding-dense: ($-kw-toggle-track-height-dense - $-kw-toggle-thumb-size-dense) / 2;
      $-kw-toggle-thumb-slide-length-dense: $-kw-toggle-track-width-dense - $-kw-toggle-track-height-dense;
      $-kw-toggle-label-font-size-dense: $kw-field-font-size-dense;
      $-kw-toggle-label-line-height-dense: $kw-field-line-height-dense;

      .q-toggle__thumb {
        top: $-kw-toggle-thumb-padding-dense;
        left: $-kw-toggle-thumb-padding-dense;
        width: $-kw-toggle-thumb-size-dense;
        height: $-kw-toggle-thumb-size-dense;
      }

      .q-toggle__inner {
        margin: 4px 0 2px;
        font-size: $-kw-toggle-thumb-size-dense; // when use icon
        padding: 0;
        width: $-kw-toggle-track-width-dense;
        height: $-kw-toggle-track-height-dense;
        min-width: auto;

        &--indet {
          .q-toggle__thumb {
            left: $-kw-toggle-thumb-padding-dense + ($-kw-toggle-thumb-slide-length-dense / 2);
          }
        }

        &--truthy {
          .q-toggle__thumb {
            left: $-kw-toggle-thumb-padding-dense + $-kw-toggle-thumb-slide-length-dense;
          }
        }
      }

      .q-toggle__label {
        padding-left: 4px;
        font-size: $-kw-toggle-label-font-size-dense;
        line-height: $-kw-toggle-label-line-height-dense;
      }

      &.reverse {
        .q-toggle__label {
          padding-left: 0;
          padding-right: 4px;
        }
      }
    }
  }
}
