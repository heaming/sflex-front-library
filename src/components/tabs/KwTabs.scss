.kw-tab {
  & .q-tab {
    &__indicator {
      // animation 핸들링 할 것 아니면 안 쓰는 것이 더 좋습니다.
      display: none;
    }
  }

  &.q-tab {
    min-height: $kw-tab-height;
    padding: $kw-tab-padding;
    transition: none;

    &--inactive {
      opacity: 1;
    }
  }

  > .q-focus-helper {
    display: none;
  }

  @include kw-tab-border(1px solid inherit, false);
  @include kw-tab-active-border($kw-tab-border-active);

  background: $kw-tab-background-color;
  color: inherit; // notify!! tabs inherit color!
  flex-flow: column nowrap; // notify!! align props will must be override.

  &::after {
    @include typo("body", 500);

    display: block;
    position: relative;
    content: attr(text)/"";
    height: 2px;
    flex: none;
    color: transparent;
    overflow: hidden;
    visibility: hidden;
  }

  &__content {
    position: relative;
    top: 1px;
    padding: 0;
    min-width: initial;
    min-height: $kw-tab-height;

    // > .q-tab__label {
    @include typo("body", 400);

    // }
  }

  &--active {
    background: $kw-tab-background-color-active;
    color: $black1;

    // .kw-tab__content > .q-tab__label {
    //   font-weight: 500;
    // }
    .kw-tab__content {
      font-weight: 500;
    }
  }

  &--dense {
    &.q-tab {
      padding: $kw-tab-padding-dense;
    }

    &::after {
      @include typo("dense", 500);
    }

    .kw-tab__content {
      min-height: $kw-tab-height-dense;

      > .q-tab__label {
        @include typo("dense", 400);
      }
    }
  }

  &.disabled {
    opacity: 1 !important;

    .kw-tab__content {
      opacity: 0.5;
    }
  }
}

.kw-tabs {
  $-kw-tabs-padding: 24px 40px 0 40px;
  $-kw-tabs-padding-dense: 0;
  $-kw-tabs-content-background-color: $bg-box;
  $-kw-tabs-content-border-color: $placeholder;
  $-kw-tabs-content-color: $disabled;
  $-kw-tabs-content-background-color-dense: $bg-white;
  $-kw-tabs-content-border-color-dense: $line-stroke;
  $-kw-tabs-content-color-dense: $disabled;

  @include kw-tabs-padding($-kw-tabs-padding, $kw-tabs-arrow-width, $kw-tabs-arrow-height);

  & .q-tabs {
    // sorry for override directly. cuase q does not provide the way to set class for target.
    &__arrow {
      $-arrow-padding: (($kw-tabs-arrow-height - 18px) / 2) (($kw-tabs-arrow-width - 18px) / 2);

      font-size: 16px;
      min-width: $kw-tabs-arrow-width;
      text-shadow: none;
      transition: none;
      background-color: $-kw-tabs-content-background-color;
      border-color: $-kw-tabs-content-border-color;

      &.q-icon {
        > svg {
          padding: $-arrow-padding;
          width: 16px;
          height: 16px;
        }
      }

      &--left {
        &.q-icon {
          > svg {
            border-width: nth($kw-tab-border, 1);
            border-style: nth($kw-tab-border, 2);
            border-color: inherit;
          }
        }

        &.q-tabs__arrow--faded {
          &.q-icon {
            > svg {
              border-right: none;
              padding-right: at($-arrow-padding, 4) + 1px;
            }
          }
        }
      }

      &--right {
        &.q-icon {
          > svg {
            border-width: nth($kw-tab-border, 1);
            border-style: nth($kw-tab-border, 2);
            border-color: inherit;
          }
        }

        &.q-tabs__arrow--faded {
          &.q-icon {
            > svg {
              border-left: none;
              padding-right: at($-arrow-padding, 2) + 1px;
            }
          }
        }
      }
    }

    &__content--align-justify .q-tab {
      flex: unset;
    }
  }

  &.q-tabs {
    &--scrollable {
      &.q-tabs__arrows--outside {
        .q-tabs__arrow--faded {
          opacity: 1;
        }
      }
    }

    // dense will be inherited!
    &--dense {
      .q-tab {
        min-height: $kw-tabs-arrow-height-dense;

        &--full {
          min-height: $kw-tabs-arrow-height-dense;
        }
      }

      .q-tabs__arrow {
        $-arrow-padding: (($kw-tabs-arrow-height-dense - 18px) / 2) (($kw-tabs-arrow-width-dense - 18px) / 2);

        min-width: $kw-tabs-arrow-width-dense;

        &.q-icon {
          > svg {
            padding: $-arrow-padding;
          }
        }

        &--left {
          &.q-tabs__arrow--faded {
            &.q-icon {
              > svg {
                padding-right: at($-arrow-padding, 4) + 1px;
              }
            }
          }
        }

        &--right {
          &.q-tabs__arrow--faded {
            &.q-icon {
              > svg {
                padding-right: at($-arrow-padding, 2) + 1px;
              }
            }
          }
        }
      }
    }
  }

  background: #fff;
  height: fit-content;

  &::before {
    content: "";
    position: absolute;
  }

  &__content {
    background-color: $-kw-tabs-content-background-color; // inactive tab has transparent bg-color by default, so it will displayed.
    color: $-kw-tabs-content-color; // notify!! inherit to inactive tab.
    border-color: $-kw-tabs-content-border-color; // notify!! inherit to inactive tab.
    height: $kw-tabs-content-height;
    flex: 0 1 auto; // notify!! should override align props handle classes.

    // align props handle classes.
    &.items-justify {
      flex-grow: 1;
    }
  }

  &--dense {
    @include kw-tabs-padding($-kw-tabs-padding-dense, $kw-tabs-arrow-width-dense, $kw-tabs-arrow-height-dense);

    .kw-tabs__content {
      background-color: $-kw-tabs-content-background-color-dense; // inactive tab has transparent bg-color by default, so it will displayed.
      color: $-kw-tabs-content-color-dense; // notify!! inherit to inactive tab.
      border-color: $-kw-tabs-content-border-color-dense; // notify!! inherit to inactive tab.
      height: $kw-tabs-content-height-dense;

      ~ .q-tabs__arrow {
        background-color: $-kw-tabs-content-background-color-dense;
        border-color: $-kw-tabs-content-border-color-dense;
      }
    }
  }

  @include color-based("&__content.border-color-", $semantic-colors) using ($color) {
    ~ .q-tabs__arrow {
      border-color: $color;
    }
  }

  @include color-based("&__content.bg-", $semantic-colors) using ($color) {
    ~ .q-tabs__arrow {
      background-color: $color;
    }
  }

  @include color-based("&__content.text-", $semantic-colors) using ($color) {
    ~ .q-tabs__arrow {
      color: $color;
    }
  }

  &--no-padding {
    @include kw-tabs-padding(0, $kw-tabs-arrow-width, $kw-tabs-arrow-height);

    &.kw-tabs--dense {
      @include kw-tabs-padding(0, $kw-tabs-arrow-width-dense, $kw-tabs-arrow-height-dense);
    }
  }

  &--show-indicator {
    .q-tab__indicator {
      display: block;
    }
  }

  $-aligns: start end left right center;

  @each $align in $-aligns {
    #{'&--align-' + $align} {
      justify-content: $align;
    }
  }

  &--align-justify {
    .kw-tabs__content {
      flex-grow: 1;
    }

    .kw-tab {
      flex-grow: 1;
    }
  }

  $-active-line-positions: top bottom left right;

  @each $-position in $-active-line-positions {
    #{'&--active-line-' + $-position} {
      &::before {
        #{'border-' + $-position}: $kw-tab-border-active;
      }

      .kw-tab {
        @include kw-tab-active-border($kw-tab-border-active, #{$-position});
      }
    }
  }

  @include color-based("&--active-border-", $semantic-colors) using ($color) {
    .kw-tab {
      &--active {
        border-color: $color;
      }
    }
  }

  @include color-based("&--active-line-", $semantic-colors) using ($color) {
    &::before {
      border-color: $color;
    }

    .kw-tab {
      &::before {
        border-color: $color;
      }
    }
  }

  // form 있을 시 border: none
  &.form-border {
    border: none !important;
  }

  // popup 안에서 search-form 인접 할 때
  &.search-border {
    padding: 24px 40px 0 !important;

    &::before {
      left: 40px !important;
      right: 40px !important;
    }
  }
}

body.mobile:not(.tablet) {
  $-kw-tab-padding: 0 10px;
  $-kw-tabs-padding: 0;
  $-kw-tabs-content-background-color: $bg-white;
  $-kw-tabs-content-border-color: $line-stroke;
  $-kw-tabs-content-color: $disabled;
  $kw-tab-background-color-active: $secondary;

  .kw-tabs {
    @include kw-tabs-padding($-kw-tabs-padding, $kw-tabs-arrow-width, $kw-tabs-arrow-height);

    $-mo-tab-border: 1px solid #ddd;

    // @include kw-tab-active-border($secondary,bottom,2px);

    &--active-line-mobile {
      .kw-tab {
        border-width: 0;
        border-bottom: $-mo-tab-border;
        padding: $-kw-tab-padding;
        flex: 1;

        &__content {
          @include typo("body", 400);
        }

        &--active {
          border-bottom-width: 2px;
          border-color: $secondary;

          .kw-tab__content {
            font-weight: 500;
          }
        }
      }
    }

    &__content {
      display: flex;
      flex-grow: 1;
      background-color: $-kw-tabs-content-background-color;

      // font-size: 14px;
    }
  }
}

// .q-tabs--scrollable > div {
//   padding-left: 40px;
//   padding-right: 40px;
// }

// ellipsis 커스텀
body:not(.mobile) :not(.web-tab-view__header) {
  .kw-tab.q-tab {
    min-width: 180px;
    max-width: 180px;
    padding: 0 12px;

    .kw-tab__content {
      width: 100%;
      text-overflow: ellipsis;
      white-space: nowrap;
      overflow: hidden;
      display: block;
      line-height: 39px;
    }

    .kw-tab.q-tab {
      width: 140px;

      .kw-tab__content {
        line-height: 34px;
      }
    }
  }

  .kw-tabs--dense .kw-tab.q-tab {
    width: 140px;

    .kw-tab__content {
      line-height: 34px;
    }
  }
}

.tab_tooltip.kw-tooltip {
  &.q-tooltip {
    padding: 8px;
    height: 28px;
    font-size: 12px;
    font-weight: 400;
    line-height: 1;
    color: #fff;
    background: $black2;
    border: none;
    border-radius: 0;
    box-shadow: 4px 5px 5px 0 rgb(0 0 0 / 6%);
  }
}

.q-panels > div {
  outline: none;
}
