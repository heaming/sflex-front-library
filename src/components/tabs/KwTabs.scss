$kw-tab-height: $kw-field-height;
$kw-tab-height-dense: 34px;
$kw-tabs-content-height: $kw-tab-height;
$kw-tabs-content-height-dense: $kw-tab-height-dense;
$kw-tab-padding: 0 28px;
$kw-tab-padding-dense: 0 20px;
$kw-tab-border: 1px solid $placeholder;
$kw-tab-active-indicate-border: 1px solid $black1;
$kw-tab-background-color: transparent;
$kw-tab-background-color-active: $bg-white;
$kw-tabs-arrow-width: $kw-tabs-content-height;
$kw-tabs-arrow-width-dense: $kw-tabs-content-height-dense;
$kw-tabs-arrow-height: $kw-tabs-content-height;
$kw-tabs-arrow-height-dense: $kw-tabs-content-height-dense;

@mixin tab-active-border($active-border, $active-line-position: null, $inactive-line-width: null) {
  $-active-line-width: 1px;
  $-active-line-style: solid;
  $-active-line-color: $black1;

  @if type-of($active-border) == "list" {
    @if length($active-border) >= 3 {
      $-active-line-width: nth($active-border, 1);
      $-active-line-style: nth($active-border, 2);
      $-active-line-color: nth($active-border, 3);
    }

    @if length($active-border) == 2 {
      $-active-line-width: nth($active-border, 1);
      $-active-line-style: nth($active-border, 2);
    }

    @if length($active-border) == 1 {
      $-active-line-width: nth($active-border, 1);
    }
  } @else {
    $-active-line-color: $active-border;
  }

  $-inactive-line-width: $-active-line-width;

  @if $inactive-line-width {
    $-inactive-line-width: $inactive-line-width;
  }

  @if not($active-line-position) {
    &::before {
      border: none;
    }
  }

  @if $active-line-position == "top" {
    &::before {
      content: "";
      position: absolute;
      inset: -1 * $-inactive-line-width;
      border-top: $active-border;
    }
  }

  @if $active-line-position == "left" {
    &::before {
      content: "";
      position: absolute;
      inset: -1 * $-inactive-line-width;
      border-left: $active-border;
    }
  }

  @if $active-line-position == "bottom" {
    &::before {
      content: "";
      position: absolute;
      inset: -1 * $-inactive-line-width;
      border-bottom: $active-border;
    }
  }

  @if $active-line-position == "right" {
    &::before {
      content: "";
      position: absolute;
      inset: -1 * $-inactive-line-width;
      border-right: $active-border;
    }
  }

  &--active {
    $-default-content-relative-top: 1px;

    border-width: $-active-line-width;
    border-style: $-active-line-style;
    border-color: $-active-line-color;

    &::before {
      display: none;
    }

    @if not($active-line-position) {
      > .kw-tab__content {
        top: $-default-content-relative-top;
      }
    }

    @if $active-line-position == "top" {
      border-top-width: 0;

      > .kw-tab__content {
        top: $-default-content-relative-top + ($-active-line-width / 2);
      }
    }

    @if $active-line-position == "left" {
      border-left-width: 0;

      > .kw-tab__content {
        left: ($-active-line-width / 2);
      }
    }

    @if $active-line-position == "bottom" {
      border-bottom-width: 0;

      > .kw-tab__content {
        top: $-default-content-relative-top - ($-active-line-width / 2);
      }
    }

    @if $active-line-position == "right" {
      border-right-width: 0;

      > .kw-tab__content {
        right: ($-active-line-width / 2);
      }
    }
  }
}

@mixin tab-border($border, $vertical: false) {
  $-line-width: 1px;
  $-line-style: solid;
  $-line-color: inherit;

  @if type-of($border) == "list" {
    @if length($border) == 3 {
      $-line-width: nth($border, 1);
      $-line-style: nth($border, 2);
      $-line-color: nth($border, 3);
    }

    @if length($border) == 2 {
      $-line-width: nth($border, 1);
      $-line-style: nth($border, 2);
    }

    @if length($border) == 1 {
      $-line-width: nth($border, 1);
    }
  } @else {
    $-line-color: $border;
  }

  border-width: $-line-width;
  border-style: $-line-style;
  border-color: $-line-color;

  @if $vertical {
    border-bottom-width: 0;

    &:last-of-type {
      border-bottom-width: $-line-width;
    }
  } @else {
    border-right-width: 0;

    &:last-of-type {
      border-right-width: $-line-width;
    }
  }

  &--active {
    @if $vertical {
      & ~ .kw-tab {
        border-top-width: 0;
        border-bottom-width: $-line-width;
      }
    } @else {
      & ~ .kw-tab {
        border-left-width: 0;
        border-right-width: $-line-width;
      }
    }
  }
}

// must use mixin when change padding for tabs.
// Cause the arrow position depends on padding.
@mixin tabs-padding($padding, $arrow-width, $arrow-height) {
  &.q-tabs {
    &--scrollable {
      &.q-tabs__arrows--outside {
        &.q-tabs--horizontal {
          padding-right: $arrow-width + at($padding, 2);
          padding-left: $arrow-width + at($padding, 4);
        }

        &.q-tabs--vertical {
          padding-top: $arrow-height + at($padding, 1);
          padding-bottom: $arrow-height + at($padding, 3);
        }
      }
    }

    &--horizontal {
      .q-tabs__arrow {
        height: $arrow-height;

        &--left {
          top: at($padding, 1);
          bottom: at($padding, 3);
          left: at($padding, 4);
        }

        &--right {
          top: at($padding, 1);
          bottom: at($padding, 3);
          right: at($padding, 2);
        }
      }
    }

    &--vertical {
      width: $arrow-width;

      .q-tabs__arrow {
        &--left {
          top: at($padding, 1);
          right: at($padding, 2);
          left: at($padding, 4);
        }

        &--right {
          right: at($padding, 2);
          bottom: at($padding, 3);
          left: at($padding, 4);
        }
      }
    }
  }

  padding: $padding;

  &::before {
    top: at($padding, 1);
    right: at($padding, 2);
    bottom: at($padding, 3);
    left: at($padding, 4);
  }
}

.kw-tab {
  & .q-tab {
    &__indicator {
      // animation 핸들링 할 것 아니면 안 쓰는 것이 더 좋습니다.
      display: none;
    }
  }

  &.q-tab {
    min-height: $kw-tab-height;
    padding: $kw-tab-padding;
    transition: none;

    &--inactive {
      opacity: 1;
    }
  }

  > .q-focus-helper {
    display: none;
  }

  @include tab-border(1px solid inherit, false);
  @include tab-active-border($kw-tab-active-indicate-border);

  background: $kw-tab-background-color;
  color: inherit; // notify!! tabs inherit color!
  flex-flow: column nowrap; // notify!! align props will must be override.

  &::after {
    @include typo("body", 500);

    display: block;
    position: relative;
    content: attr(text)/"";
    height: 2px;
    flex: none;
    color: transparent;
    overflow: hidden;
    visibility: hidden;
  }

  &__content {
    position: relative;
    top: 1px;
    padding: 0;
    min-width: initial;
    min-height: $kw-tab-height;

    > .q-tab__label {
      @include typo("body", 400);
    }
  }

  &--active {
    background: $kw-tab-background-color-active;
    color: $black1;

    .kw-tab__content > .q-tab__label {
      font-weight: 500;
    }
  }

  &--dense {
    &.q-tab {
      padding: $kw-tab-padding-dense;
    }

    &::after {
      @include typo("dense", 500);
    }

    .kw-tab__content {
      min-height: $kw-tab-height-dense;

      > .q-tab__label {
        @include typo("dense", 400);
      }
    }
  }
}

.kw-tabs {
  $-kw-tabs-padding: 24px 40px 0 40px;
  $-kw-tabs-padding-dense: 0;
  $-kw-tabs-content-background-color: $bg-box;

  @include tabs-padding($-kw-tabs-padding, $kw-tabs-arrow-width, $kw-tabs-arrow-height);

  & .q-tabs {
    // sorry for override directly. cuase q does not provide the way to set class for target.
    &__arrow {
      $-arrow-padding: (($kw-tabs-arrow-height - 18px) / 2) (($kw-tabs-arrow-width - 18px) / 2);

      font-size: 16px;
      min-width: $kw-tabs-arrow-width;
      text-shadow: none;
      transition: none;

      &.q-icon {
        > svg {
          padding: $-arrow-padding;
          background-color: $-kw-tabs-content-background-color;
          width: 16px;
          height: 16px;
        }
      }

      &--left {
        &.q-icon {
          > svg {
            border-width: nth($kw-tab-border, 1);
            border-style: nth($kw-tab-border, 2);
            border-color: inherit;
          }
        }

        &.q-tabs__arrow--faded {
          &.q-icon {
            > svg {
              border-right: none;
              padding-right: at($-arrow-padding, 4) + 1px;
            }
          }
        }
      }

      &--right {
        &.q-icon {
          > svg {
            border-width: nth($kw-tab-border, 1);
            border-style: nth($kw-tab-border, 2);
            border-color: inherit;
          }
        }

        &.q-tabs__arrow--faded {
          &.q-icon {
            > svg {
              border-left: none;
              padding-right: at($-arrow-padding, 2) + 1px;
            }
          }
        }
      }
    }

    &__content--align-justify .q-tab {
      flex: unset;
    }
  }

  &.q-tabs {
    &--scrollable {
      &.q-tabs__arrows--outside {
        .q-tabs__arrow--faded {
          opacity: 1;
        }
      }
    }

    // dense will be inherited!
    &--dense {
      .q-tab {
        min-height: $kw-tabs-arrow-height-dense;

        &--full {
          min-height: $kw-tabs-arrow-height-dense;
        }
      }

      .q-tabs__arrow {
        $-arrow-padding: (($kw-tabs-arrow-height-dense - 18px) / 2) (($kw-tabs-arrow-width-dense - 18px) / 2);

        min-width: $kw-tabs-arrow-width-dense;

        &.q-icon {
          > svg {
            padding: $-arrow-padding;
          }
        }

        &--left {
          &.q-tabs__arrow--faded {
            &.q-icon {
              > svg {
                padding-right: at($-arrow-padding, 4) + 1px;
              }
            }
          }
        }

        &--right {
          &.q-tabs__arrow--faded {
            &.q-icon {
              > svg {
                padding-right: at($-arrow-padding, 2) + 1px;
              }
            }
          }
        }
      }
    }
  }

  background: #fff;
  height: fit-content;

  &::before {
    content: "";
    position: absolute;
  }

  &__content {
    background-color: $-kw-tabs-content-background-color; // inactive tab has transparent bg-color by default, so it will displayed.
    color: $black3; // notify!! inherit to inactive tab.
    border-color: $placeholder; // notify!! inherit to inactive tab.
    height: $kw-tabs-content-height;
    flex: 0 1 auto; // notify!! should override align props handle classes.

    // align props handle classes.
    &.items-justify {
      flex-grow: 1;
    }
  }

  @include color-based("&__content.border-color-", $semantic-colors) using ($color) {
    ~ .q-tabs__arrow {
      border-color: $color;
    }
  }

  &--dense {
    @include tabs-padding($-kw-tabs-padding-dense, $kw-tabs-arrow-width-dense, $kw-tabs-arrow-height-dense);
  }

  &--no-padding {
    @include tabs-padding(0, $kw-tabs-arrow-width, $kw-tabs-arrow-height);

    &.kw-tabs--dense {
      @include tabs-padding(0, $kw-tabs-arrow-width-dense, $kw-tabs-arrow-height-dense);
    }
  }

  &--show-indicator {
    .q-tab__indicator {
      display: block;
    }
  }

  $-aligns: start end left right center;

  @each $align in $-aligns {
    #{'&--align-' + $align} {
      justify-content: $align;
    }
  }

  &--align-justify {
    .kw-tabs__content {
      flex-grow: 1;
    }

    .kw-tab {
      flex-grow: 1;
    }
  }

  $-active-line-positions: top bottom left right;

  @each $-position in $-active-line-positions {
    #{'&--active-line-' + $-position} {
      &::before {
        #{'border-' + $-position}: $kw-tab-active-indicate-border;
      }

      .kw-tab {
        @include tab-active-border($kw-tab-border, #{$-position});
      }
    }
  }

  @include color-based("&--active-border-", $semantic-colors) using ($color) {
    .kw-tab {
      &--active {
        border-color: $color;
      }
    }
  }

  @include color-based("&--active-line-", $semantic-colors) using ($color) {
    &::before {
      border-color: $color;
    }

    .kw-tab {
      &::before {
        border-color: $color;
      }
    }
  }
}

/*
// FIXME THIS.

.kw-popup:has(.kw-search),
.kw-page:has(.kw-search) {
  .kw-tabs {
    border: 1px solid #ddd;
    border-bottom: 0;
  }

  .kw-tab-panel .kw-tabs {
    border-top: 0;
  }
}

body.mobile:not(.tablet) {
  .kw-tabs {
    border: 0;
    padding: 0;

    .q-tabs__content {
      height: 40px;
      border-bottom: none;
      overflow: visible;
    }

    .kw-tab {
      padding: 0;
      flex: 1 1 50%;
      min-height: 40px;
      height: 40px !important;
      background: none;
      border: 1px solid $line-stroke;
      opacity: 1;

      & + .kw-tab {
        margin-left: -1px;
      }

      .q-tab__content {
        padding: 0;
        height: 38px; // 바깥 border 제외 높이
        color: $black3;
      }

      .q-tab__label {
        @include typo("dense");
      }

      &.q-tab--active {
        background: $secondary;
        border: none;

        .q-tab__label,
        .q-tab__content {
          color: #fff;
        }

        .q-tab__indicator {
          display: none;
        }

        & + .kw-tab {
          border-left: 1px solid $black1;
        }
      }

      .q-focus-helper {
        display: none;
      }
    }
  }
}

*/
